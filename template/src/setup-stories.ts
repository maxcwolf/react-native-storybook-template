/* eslint-disable no-console */
import * as fs from 'graceful-fs'
import * as path from 'path'
import chalk from 'chalk'

const SRC_DIR = path.join(__dirname, '/stories')
const LOAD_STORIES_DIR = path.join(__dirname)
const LOAD_STORIES_FILE = path.join(LOAD_STORIES_DIR, 'load-stories.ts')
const STORY_EXTENSION = '.stories.tsx'

const findFilesInDir = (dir: string, extension: string) => {
  let results: string[] = []

  if (!fs.existsSync(dir)) {
    throw new Error(`No such directory: ${dir}`)
  }

  const files = fs.readdirSync(dir)
  for (const file of files) {
    const filename = path.join(dir, file)

    const stat = fs.lstatSync(filename)
    if (stat.isDirectory()) {
      results = results.concat(findFilesInDir(filename, extension))
    } else if (filename.endsWith(extension)) {
      const absFile = path.resolve(filename)
      results.push(absFile)
    }
  }
  return results.sort()
}

const removeFileExtension = (filename: string) => {
  const lastDotPosition = filename.lastIndexOf('.')

  // prettier-ignore
  return lastDotPosition > -1
    ? filename.substr(0, lastDotPosition)
    : filename
}
const makeRelativeToStorybookDir = (filename: string) =>
  filename.startsWith('stories') ? `./${filename}` : filename

// Stories must be in the SRC_DIR (./stories/) directory tree since the relative path
// output here will always be `stories/`
const makeRelative = (file: string, toDir: string, removeExtension: boolean) => {
  const filePath = path.dirname(file)
  const fileName = path.basename(file)

  const relativePath = path.relative(toDir, filePath)
  const filename = path.join(relativePath, fileName).replace(/\\/g, '/')
  const relativeFilename = makeRelativeToStorybookDir(filename)

  return removeExtension ? removeFileExtension(relativeFilename) : relativeFilename
}

const loadStoriesTemplate = (requireStatements: string) => `///////////////////
// AUTO GENERATED by setup-stories.ts
// Import loadStories in src/index.tsx and execute in the configure function execution.
///////////////////

export const loadStories = () => {
${requireStatements}
}

`

const getRequireStatements = (filePaths: string[]) =>
  filePaths.map(filePath => `  require('${filePath}.tsx')`).join('\n')

const generateLoadStories = (filePaths: string[]) =>
  loadStoriesTemplate(getRequireStatements(filePaths))

const getFilesWithRelativePath = (files: string[]) =>
  files.map(file => makeRelative(file, LOAD_STORIES_DIR, true))

const writeLoadStoriesFile = (files: string[]) => {
  const filesWithRelativePath = getFilesWithRelativePath(files)

  const content = generateLoadStories(filesWithRelativePath)
  fs.writeFileSync(LOAD_STORIES_FILE, content)
}

const setupStories = () => {
  console.log(chalk.bold.magenta('⏳  Finding stories and adding to Storybook 📚🔍🧐 '))
  const files = findFilesInDir(SRC_DIR, STORY_EXTENSION)

  if (!files.length) {
    throw new Error(`😭  No Story files found in '${SRC_DIR}' with extension '${STORY_EXTENSION}'`)
  }

  writeLoadStoriesFile(files)

  console.log(chalk.bold.magenta('⌛  Storybook setup complete! 🎉 '))
}

setupStories()
